{
  "name": "kiutils",
  "version": "1.4.8",
  "description": "Simple and SCM-friendly KiCad file parser based on Python dataclasses for KiCad 6.0 and up",
  "documentation": {
    "official": "https://kiutils.readthedocs.io/",
    "github": "https://github.com/mvnmgrx/kiutils",
    "pypi": "https://pypi.org/project/kiutils/"
  },
  "purpose": [
    "Parse KiCad files (board, schematic, symbol, footprint) into Python objects",
    "Manipulate KiCad files programmatically",
    "Generate KiCad files from scratch",
    "Convert between KiCad versions (6.0+)",
    "SCM-friendly file manipulation without breaking layout"
  ],
  "installation": {
    "method": "pip install kiutils",
    "requirements": "Python 3.7+"
  },
  "core_modules": {
    "board": {
      "class": "Board",
      "import": "from kiutils.board import Board",
      "description": "Parse and manipulate KiCad PCB files (.kicad_pcb)",
      "file_extension": ".kicad_pcb",
      "key_attributes": [
        "footprints",
        "nets",
        "traceItems",
        "zones",
        "graphicItems",
        "layers",
        "setup",
        "general",
        "titleBlock"
      ],
      "key_classes": [
        "Footprint",
        "Net",
        "Via",
        "Segment",
        "Zone",
        "Arc",
        "GrLine",
        "GrText",
        "GrPoly",
        "GrCircle",
        "GrArc",
        "GrRect"
      ]
    },
    "schematic": {
      "class": "Schematic",
      "import": "from kiutils.schematic import Schematic",
      "description": "Parse and manipulate KiCad schematic files (.kicad_sch)",
      "file_extension": ".kicad_sch",
      "key_attributes": [
        "schematicSymbols",
        "sheets",
        "libSymbols",
        "junctions",
        "noConnects",
        "busEntries",
        "busAliases",
        "labels",
        "globalLabels",
        "hierarchicalLabels",
        "netclassFlags",
        "texts",
        "textBoxes",
        "graphicalItems",
        "sheetInstances",
        "symbolInstances"
      ],
      "key_classes": [
        "SchematicSymbol",
        "HierarchicalSheet",
        "Junction",
        "Connection",
        "LocalLabel",
        "GlobalLabel",
        "HierarchicalLabel",
        "NoConnect",
        "BusEntry",
        "Wire",
        "PolyLine",
        "Arc",
        "Circle",
        "Rectangle",
        "Text",
        "TextBox"
      ]
    },
    "footprint": {
      "class": "Footprint",
      "import": "from kiutils.footprint import Footprint",
      "description": "Parse and manipulate KiCad footprint files (.kicad_mod)",
      "file_extension": ".kicad_mod",
      "key_attributes": [
        "pads",
        "graphicItems",
        "models",
        "attributes",
        "layer",
        "description",
        "tags",
        "properties"
      ],
      "key_classes": [
        "Pad",
        "FpLine",
        "FpArc",
        "FpCircle",
        "FpRect",
        "FpPoly",
        "FpText",
        "Model"
      ]
    },
    "symbol": {
      "class": "SymbolLib",
      "import": "from kiutils.symbol import SymbolLib",
      "description": "Parse and manipulate KiCad symbol library files (.kicad_sym)",
      "file_extension": ".kicad_sym",
      "key_attributes": [
        "symbols",
        "version"
      ],
      "key_classes": [
        "Symbol",
        "SymbolPin",
        "Property",
        "SyArc",
        "SyCircle",
        "SyPolyLine",
        "SyRect",
        "SyText"
      ]
    },
    "libraries": {
      "class": "LibTable",
      "import": "from kiutils.libraries import LibTable",
      "description": "Parse and manipulate KiCad library tables (fp-lib-table, sym-lib-table)",
      "file_extensions": ["fp-lib-table", "sym-lib-table"]
    },
    "worksheet": {
      "class": "WorkSheet",
      "import": "from kiutils.wks import WorkSheet",
      "description": "Parse and manipulate KiCad worksheet files (.kicad_wks)",
      "file_extension": ".kicad_wks"
    },
    "design_rules": {
      "class": "DesignRules",
      "import": "from kiutils.dru import DesignRules",
      "description": "Parse and manipulate KiCad design rules files (.kicad_dru)",
      "file_extension": ".kicad_dru"
    }
  },
  "common_methods": {
    "all_classes": {
      "from_file": {
        "signature": "from_file(filepath: str)",
        "description": "Load and parse a KiCad file",
        "returns": "Instance of the class",
        "example": "board = Board.from_file('project.kicad_pcb')"
      },
      "to_file": {
        "signature": "to_file(filepath: str = None)",
        "description": "Write object to file as KiCad S-Expression",
        "parameters": "If filepath is None, uses original file path",
        "example": "board.to_file('output.kicad_pcb')"
      },
      "from_sexpr": {
        "signature": "from_sexpr(sexpr: str)",
        "description": "Parse S-Expression string into object",
        "returns": "Instance of the class",
        "example": "board = Board.from_sexpr(sexpr_string)"
      },
      "to_sexpr": {
        "signature": "to_sexpr()",
        "description": "Generate KiCad S-Expression representation",
        "returns": "S-Expression string",
        "example": "sexpr = board.to_sexpr()"
      },
      "create_new": {
        "signature": "create_new()",
        "description": "Create new object with KiCad-like defaults",
        "returns": "New instance with default configuration",
        "example": "board = Board.create_new()"
      }
    }
  },
  "usage_patterns": {
    "parsing_files": {
      "description": "Load and parse existing KiCad files",
      "example": [
        "from kiutils.board import Board",
        "board = Board.from_file('project.kicad_pcb')",
        "# Access board data",
        "for footprint in board.footprints:",
        "    print(f'Footprint: {footprint.reference}')"
      ]
    },
    "creating_files": {
      "description": "Create new KiCad files from scratch",
      "example": [
        "from kiutils.board import Board",
        "board = Board.create_new()",
        "# Add components, traces, etc.",
        "board.to_file('new_board.kicad_pcb')"
      ]
    },
    "modifying_files": {
      "description": "Load, modify, and save KiCad files",
      "example": [
        "from kiutils.schematic import Schematic",
        "sch = Schematic.from_file('circuit.kicad_sch')",
        "# Modify schematic",
        "for symbol in sch.schematicSymbols:",
        "    if symbol.reference == 'R1':",
        "        symbol.value = '10k'",
        "sch.to_file()  # Save to original file"
      ]
    },
    "working_with_footprints": {
      "description": "Access and manipulate footprints in PCB",
      "example": [
        "from kiutils.board import Board",
        "board = Board.from_file('board.kicad_pcb')",
        "for fp in board.footprints:",
        "    print(f'{fp.reference}: {fp.position.X}, {fp.position.Y}')",
        "    for pad in fp.pads:",
        "        print(f'  Pad {pad.number}: Net {pad.net.name}')"
      ]
    },
    "working_with_nets": {
      "description": "Access net information",
      "example": [
        "from kiutils.board import Board",
        "board = Board.from_file('board.kicad_pcb')",
        "for net in board.nets:",
        "    print(f'Net {net.number}: {net.name}')"
      ]
    },
    "working_with_symbols": {
      "description": "Access and manipulate schematic symbols",
      "example": [
        "from kiutils.schematic import Schematic",
        "sch = Schematic.from_file('schematic.kicad_sch')",
        "for symbol in sch.schematicSymbols:",
        "    print(f'{symbol.reference}: {symbol.value}')",
        "    for prop in symbol.properties:",
        "        print(f'  {prop.key}: {prop.value}')"
      ]
    }
  },
  "data_structures": {
    "coordinates": {
      "description": "Position and coordinate handling",
      "classes": ["Position", "Coordinate"],
      "attributes": ["X", "Y", "angle"],
      "note": "Coordinates are in millimeters for PCB, mils for schematic"
    },
    "graphics": {
      "description": "Graphical elements",
      "pcb_classes": ["GrLine", "GrArc", "GrCircle", "GrPoly", "GrRect", "GrText"],
      "schematic_classes": ["PolyLine", "Arc", "Circle", "Rectangle", "Text"],
      "footprint_classes": ["FpLine", "FpArc", "FpCircle", "FpPoly", "FpRect", "FpText"]
    },
    "properties": {
      "description": "Component and symbol properties",
      "class": "Property",
      "attributes": ["key", "value", "id", "at", "effects"]
    },
    "effects": {
      "description": "Text and visual effects",
      "class": "Effects",
      "attributes": ["font", "justify", "hide"]
    }
  },
  "s_expression_handling": {
    "parser": {
      "description": "Based on KiCad's S-Expression format",
      "module": "kiutils.utils.sexpr",
      "functions": ["parse_sexpr", "build_sexpr"]
    },
    "format": {
      "description": "Lisp-like nested parentheses format",
      "example": "(kicad_pcb (version 20221018) (generator pcbnew))"
    }
  },
  "version_compatibility": {
    "supported": "KiCad 6.0 and up",
    "conversion": "KiCad <6 files are converted to KiCad 6 format on save",
    "warnings": [
      "Older footprints may have conversion errors",
      "Some KiCad 5 features may not be fully compatible"
    ]
  },
  "best_practices": {
    "file_handling": [
      "Always use absolute paths or proper relative paths",
      "Check file existence before parsing",
      "Handle exceptions when parsing potentially invalid files"
    ],
    "modification": [
      "Make backup copies before modifying files",
      "Validate data before writing to file",
      "Test modifications on sample files first"
    ],
    "performance": [
      "Large files may take time to parse",
      "Consider using selective parsing for specific elements",
      "Cache parsed objects when doing multiple operations"
    ]
  },
  "common_use_cases": {
    "batch_processing": "Process multiple KiCad files programmatically",
    "validation": "Check design rules and consistency across files",
    "conversion": "Convert between KiCad versions or to other formats",
    "generation": "Generate PCBs or schematics from external data",
    "analysis": "Extract statistics and reports from designs",
    "automation": "Automate repetitive design tasks"
  },
  "integration": {
    "with_kicad": "Works alongside KiCad, doesn't require KiCad installation",
    "with_scm": "Designed to be SCM-friendly, preserves file formatting",
    "with_python": "Pure Python implementation using dataclasses"
  },
  "limitations": [
    "No graphical rendering capabilities",
    "No electrical rule checking",
    "No auto-routing functionality",
    "Limited to file manipulation only"
  ],
  "error_handling": {
    "common_errors": [
      "FileNotFoundError: File doesn't exist",
      "ParseError: Invalid S-Expression format",
      "AttributeError: Accessing non-existent attributes",
      "ValueError: Invalid values for KiCad properties"
    ],
    "recommended_approach": [
      "Use try-except blocks when parsing files",
      "Validate data before assignment",
      "Check for None values in optional fields"
    ]
  }
}