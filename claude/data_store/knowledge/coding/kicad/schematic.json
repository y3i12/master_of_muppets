{
"document_type": "kicad_schematic_structure_reference",
"document_version": "1.1.0",
"parser_framework": "kiutils",
"test_validation": "amplifier_board_and_master_of_muppets_hierarchical_schematics",
"core_objects": {
"schematic": {
"description": "Main container for all schematic data",
"access_method": "Schematic.from_file(path)",
"key_attributes": [
"schematicSymbols",
"junctions",
"graphicalItems",
"libSymbols",
"sheets",
"labels",
"globalLabels",
"hierarchicalLabels"
]
},
"schematic_symbols": {
"description": "Components in the schematic",
"type": "List of SchematicSymbol objects",
"properties": {
"reference": {
    "extraction": "from properties where key='Reference'",
    "location": "symbol.properties"
},
"value": {
    "extraction": "from properties where key='Value'",
    "location": "symbol.properties"
},
"position": {
    "x_coordinate": "symbol.position.X",
    "y_coordinate": "symbol.position.Y"
},
"library": "symbol.libraryIdentifier"
}
},
"wire_connectivity": {
"junctions": {
"description": "Points where multiple wires connect",
"location": "schematic.junctions",
"position": {
    "x": "junction.position.X",
    "y": "junction.position.Y"
}
},
"connections": {
"description": "Individual wire segments",
"location": "graphicalItems of type Connection",
"points": {
    "start": "connection.points[0]",
    "end": "connection.points[-1]",
    "coordinates": "each point has .X and .Y"
}
},
"net_building": "components connect via proximity to wire endpoints/junctions"
},
"hierarchical_sheets": {
"description": "Sheets that can instantiate multiple times",
"structure": "sheets can be used as physical components",
"connections": "sheet pins connect to parent via hierarchical labels",
"instances": "same sheet creates different component instances"
}
},
"coordinate_system": {
"units": "millimeters (mm)",
"grid": "components typically snap to 2.54mm (0.1 inch) grid",
"tolerance": "use ~5-10mm tolerance when matching positions to wire endpoints"
},
"net_connectivity_algorithm": {
"steps": [
"Extract junctions from schematic.junctions",
"Extract wire segments from graphicalItems (type=Connection)",
"Build wire graph by connecting wires that share junction points",
"Group connected wires into electrical nets using graph traversal",
"Match components to nets by position proximity to wire endpoints"
],
"tolerance_matching": {
"function": "points_match",
"parameters": [
"p1",
"p2",
"tolerance=5.0"
],
"logic": "abs(p1[0] - p2[0]) < tolerance and abs(p1[1] - p2[1]) < tolerance"
},
"wire_connectivity": {
"not_explicit": "KiCad doesn't store nets directly",
"computed": "must be derived from wire geometry and junctions",
"junction_based": "wires meeting at same junction are electrically connected",
"component_pins": "components connect where position matches wire endpoints"
}
},
"net_connectivity_structure": {
"data_format": {
"nets": {
"type": "array",
"items": {
    "id": "string like 'net_0'",
    "wire_count": "integer",
    "components": "array of component references connected to this net",
    "points": "array of (x, y) wire endpoint coordinates"
}
},
"junction_count": "integer",
"wire_count": "integer"
}
},
"kiutils_patterns": {
"loading_schematics": {
"import": "from kiutils.schematic import Schematic",
"usage": "schematic = Schematic.from_file('path.kicad_sch')"
},
"extracting_connections": {
"code": "connections = [item for item in schematic.graphicalItems if type(item).__name__ == 'Connection']"
},
"building_junction_map": {
"code": [
"junction_positions = set()",
"for junction in schematic.junctions:",
"    junction_positions.add((junction.position.X, junction.position.Y))"
]
},
"component_position_access": {
"code": [
"for symbol in schematic.schematicSymbols:",
"    if hasattr(symbol, 'position'):",
"        x, y = symbol.position.X, symbol.position.Y"
]
}
},
"common_pitfalls": [
"No direct net objects - nets must be computed from wire geometry",
"Position precision - floating point coordinates need tolerance matching",
"Junction importance - critical for determining electrical connectivity",
"Wire segments - individual Connection objects, not complete nets",
"Component pins - not explicitly stored with wire connections",
"Ground symbol handling - multiple ground symbols should be unified into single electrical net",
"Property objects are not JSON serializable - must extract .value attribute",
"HierarchicalSheet fileName is Property object, not string",
"Import path is 'schitems' not 'schitem' in kiutils.items",
"Label classes are in schitems module, not brditems",
"Hierarchical sheet reconstruction requires special handling"
],
"advanced_processing": {
"ground_symbol_unification": {
"description": "Multiple ground symbols (#GND1, #GND2, #GND3) should be treated as same electrical net",
"function": "unify_ground_nets",
"logic": "combine all nets containing ground symbols into unified ground net"
},
"graph_visualization": {
"connectivity": "full mesh connectivity within each net",
"ground_handling": "all ground symbols connect through unified ground net",
"physics_simulation": [
"global repulsion between all nodes",
"selective gravity only between connected nodes"
],
"overlap_prevention": "calculate minimum distances based on component bounding boxes"
},
"physics_parameters": {
"edge_length": "100-200 pixels desired distance",
"repulsion": "500-1000 global repulsion strength",
"gravity": "1-10 attraction strength for connected nodes",
"repulsion_range": "100-300 max distance for repulsion",
"gravity_range": "200-500 max distance for gravity",
"damping": "0.8-0.9 velocity damping for stability",
"speed": "0.5-2.0 animation speed multiplier"
},
"component_visualization_mapping": {
"passive_components": [
"R",
"C",
"L",
"rectangles",
"ellipses",
"spirals"
],
"active_components": [
"Q",
"U",
"triangles",
"rectangles with multiple pins"
],
"connectors": [
"pentagons",
"custom connector shapes"
],
"power_symbols": [
"stars",
"arrows",
"+V",
"-V"
],
"ground_symbols": [
"inverted triangles",
"diamonds"
],
"test_points": [
"small circles"
]
}
},
"json_structure": {
"complete_schematic_format": {
"metadata": {
"converter_version": "string like '1.0.0'",
"source_file": "string path to original .kicad_sch",
"kicad_version": "integer like 20240101",
"generator": "string like 'eeschema'"
},
"schematic_symbols": "array of components",
"sheets": "array of hierarchical sheets",
"graphical_items": "array of wires, junctions, shapes",
"labels": "array of local net labels",
"global_labels": "array of global net labels",
"hierarchical_labels": "array of sheet interface pins",
"lib_symbols": "array of library symbol definitions",
"symbol_instances": "array of component instance data",
"bus_aliases": "array of bus definitions",
"page_settings": "object with page size, orientation",
"title_block": "object with title, revision, date",
"net_connectivity": "object with computed net information"
}
},
"analysis_functions": {
"loading_data": {
"function": "load_schematic_data",
"path_pattern": "claude/data_store/schematics/{project_name}/complete_project/{project_name}.json",
"encoding": "utf-8"
},
"component_analysis": {
"function": "analyze_components",
"extracts": [
"reference from properties key='Reference'",
"value from properties key='Value'",
"footprint from properties key='Footprint'",
"library identifier",
"position",
"uuid"
],
"returns": "component_map dictionary keyed by reference"
},
"component_counting": {
"function": "count_components_by_type",
"groups_by": "reference prefix (R, C, U, Q, etc.)",
"uses": "collections.Counter",
"returns": "dictionary of type counts"
},
"hierarchical_sheets": {
"function": "get_sheet_hierarchy",
"extracts": [
"sheet name",
"file path",
"instances (multiple uses)"
],
"instance_properties": [
"path",
"page number"
]
}
},
"net_analysis": {
"trace_nets": {
"function": "trace_nets",
"categories": {
"local": "local labels (sheet-scoped)",
"global": "global labels (project-wide)",
"hierarchical": "hierarchical pins (sheet interfaces)",
"power": "power symbols identified by keywords"
},
"power_keywords": [
"GND",
"VCC",
"VDD",
"+",
"-",
"POWER"
]
},
"connectivity_analysis": {
"function": "analyze_net_connectivity",
"analyzes": "computed netConnectivity data",
"metrics": [
"total_nets",
"components_per_net",
"largest_net identification",
"ground_nets identification",
"power_nets identification"
],
"special_nets": {
"ground": "components starting with #GND",
"power": "components starting with #P+ or #PWR"
}
},
"wire_connections": {
"function": "get_connections",
"extracts": [
"wire segments from graphicalItems type=Connection",
"junctions from dedicated junction list"
],
"connection_properties": [
"start/end coordinates",
"uuid"
],
"junction_properties": [
"position coordinates",
"diameter"
]
}
},
"utility_functions": {
"component_search": {
"function": "find_components_by_value",
"parameters": [
"schematic_data",
"search_value"
],
"search_method": "case-insensitive substring match",
"returns": [
"reference",
"value",
"position",
"library"
]
},
"power_analysis": {
"function": "analyze_power_distribution",
"identifies": [
"power_symbols by library identifier",
"voltage_levels using regex",
"power_nets from global labels"
],
"voltage_extraction": "regex pattern ([+-]?\\d+\\.?\\d*)[Vv]"
},
"safe_access": {
"function": "safe_json_access",
"path_format": "dot notation like 'netConnectivity.nets.0.components'",
"handles": "missing keys, array indices, type errors gracefully"
}
},
"validation": {
"json_structure": {
"function": "validate_schematic_json",
"checks": [
"required sections presence",
"component reference completeness",
"position information availability",
"net connectivity validity"
],
"required_sections": [
"metadata",
"schematicSymbols"
],
"returns": {
"valid": "boolean",
"errors": "critical issues array",
"warnings": "non-critical issues array",
"component_count": "integer"
}
}
},
"file_organization": {
"structure": "claude/data_store/schematics/project_name/complete_project/ProjectName.json",
"includes": [
"project_info.json",
"kicad_schematic_knowledge.md"
]
},
"best_practices": {
"data_access": [
"Always use safe_json_access() for nested data",
"Check for computed netConnectivity before manual analysis",
"Validate JSON structure before processing",
"Use get() method with defaults for optional fields",
"Always extract .value from Property objects for JSON serialization",
"Use hasattr() checks before accessing nested attributes",
"Handle Property objects in safe_get_property with .value extraction"
],
"analysis_tips": [
"Start with component counting for complexity understanding",
"Check for hierarchical sheets - same sheet may be used multiple times",
"Identify power distribution early for supply architecture",
"Cross-reference with PCB data when available"
],
"performance_considerations": [
"Cache component maps for repeated analysis",
"Use Counter for type counting rather than manual loops",
"Process large hierarchies sheet-by-sheet for memory management",
"Validate data types before mathematical operations"
]
}
}