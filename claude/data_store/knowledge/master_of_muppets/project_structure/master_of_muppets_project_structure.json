{
"name": "Master of Muppets Project Structure",
"version": "1.0.0",
"description": "Comprehensive documentation of the Master of Muppets USB MIDI to CV converter project structure, organization, and development methodology",
"keywords": [
"project structure",
"master of muppets",
"organization",
"architecture",
"file layout",
"development methodology",
"ai-assisted development",
"embedded systems",
"kicad",
"teensy",
"midi cv",
"knowledge management",
"seasonal development",
"claude ai"
],
"project_overview": {
"name": "Master Of Muppets",
"description": "Professional USB MIDI to 16-channel CV converter with AI-assisted development",
"platform": "Teensy 4.1",
"purpose": "Convert MIDI pitch bend messages to 0-10V control voltages across 16 independent channels",
"key_features": [
"16 channels of precise CV output (0-10V range)",
"2-3ms latency for real-time performance", 
"Template-based architecture for DAC flexibility",
"AI-optimized tooling development with 900x efficiency gains",
"Open source tools for the KiCad community"
],
"development_model": "AI-assisted collaborative development with seasonal structure"
},
"root_directory_structure": {
"description": "Top-level organization of the Master of Muppets aggregate workspace",
"structure": {
"project_documentation": {
"files": [
    "README.md - Main project documentation and overview",
    "ARCHITECTURE.md - System design and technical architecture", 
    "HARDWARE.md - Hardware specifications and design details",
    "CODING_STYLE.md - Project coding conventions and patterns",
    "CLAUDE.md - AI-assisted development protocols and instructions"
],
"purpose": "High-level project documentation and development guidelines"
},
"workspace_configuration": {
"files": [
    "master_of_muppets aggregate.code-workspace - Visual Studio Code workspace configuration"
],
"purpose": "IDE workspace setup for multi-folder project structure"
},
"major_directories": {
"firmware/": "Embedded C++ firmware for Teensy 4.1 microcontroller",
"hardware/": "KiCad schematic and PCB design files",
"claude/": "AI knowledge management system and development tools",
"data_sheets/": "Component datasheets and technical documentation"
}
}
},
"firmware_structure": {
"location": "firmware/",
"description": "Embedded C++ firmware following Arduino/PlatformIO conventions with real-time optimization",
"build_system": "PlatformIO with Teensy platform",
"framework": "Arduino",
"target": "Teensy 4.1 (ARM Cortex-M7 @ 600MHz)",
"structure": {
"platformio.ini": {
"purpose": "PlatformIO project configuration",
"key_settings": [
    "Board: teensy41",
    "Framework: arduino", 
    "Libraries: Adafruit BusIO, Adafruit MCP4728, AD5593R, TeensyThreads, FunctionGenerator",
    "Optimization: -O3 with ARM-specific flags",
    "Build flags: USB_MIDI_SERIAL, ARM_MATH_CM7"
]
},
"src/": {
"description": "Main application source code",
"files": {
    "main.cpp": "Main application entry point with setup() and loop()",
    "master_of_muppets.hpp": "Core application header and definitions",
    "muppet_clock.cpp": "Timing and synchronization functionality",
    "name.c": "Device naming and identification",
    "drivers/": "Hardware abstraction layer drivers"
},
"drivers": {
    "adafruit_mcp_4728.cpp": "MCP4728 DAC driver implementation",
    "rob_tillaart_ad_5993r.cpp": "AD5593R DAC driver implementation"
}
},
"include/": {
"description": "Header files and public interfaces",
"structure": {
    "dr_teeth.h": "Main application interface (named after Muppets character)",
    "electric_mayhem.h": "System-wide definitions and constants",
    "muppet_clock.h": "Timing system interface",
    "drivers/": "Driver header files matching src/drivers/"
}
},
"lib/": {
"description": "Third-party and custom libraries",
"libraries": {
    "AD5593R/": "Rob Tillaart's AD5593R DAC library",
    "Adafruit BusIO/": "Adafruit I2C/SPI abstraction layer",
    "Adafruit MCP4728/": "Adafruit MCP4728 4-channel DAC library", 
    "FunctionGenerator/": "Rob Tillaart's function generation library",
    "TeensyThreads/": "Fernando Trias' cooperative multithreading library"
},
"inclusion_policy": "All dependencies included for hackability and reproducibility"
},
"test/": {
"description": "Unit tests and test framework",
"files": ["README - Test documentation and procedures"]
}
},
"architectural_patterns": {
"threading_model": "Cooperative multitasking using TeensyThreads",
"memory_management": "Static allocation only (embedded best practice)",
"template_architecture": "Generic DAC driver interface for hardware flexibility",
"optimization_level": "Maximum performance with ARM-specific optimizations",
"real_time_features": [
"Mutex-protected state with sequence tracking",
"Lock-free buffers for minimal thread blocking",
"Parallel I2C buses for concurrent DAC updates",
"Dynamic addressing via chip select pins"
]
}
},
"hardware_structure": {
"location": "hardware/",
"description": "KiCad electrical design files for PCB manufacturing and assembly",
"design_tool": "KiCad 6.0+",
"projects": {
"master_of_muppets/": {
"description": "Main USB MIDI to CV converter hardware design",
"files": {
    "master_of_muppets.kicad_pro": "KiCad project file",
    "master_of_muppets.kicad_sch": "Main schematic file",
    "master_of_muppets.kicad_pcb": "PCB layout file",
    "master_of_muppets.kicad_sym": "Custom symbol library",
    "master_of_muppets.kicad_dru": "Design rule check settings",
    "hierarchical_schematics": {
        "amp_module.kicad_sch": "Amplifier stage schematic",
        "dac_module.kicad_sch": "DAC interface schematic",
        "jack_sheet.kicad_sch": "Jack connections schematic",
        "teensy_module.kicad_sch": "Teensy microcontroller schematic",
        "unripple_module.kicad_sch": "Power supply filtering schematic"
    }
},
"design_approach": "Hierarchical schematic organization for maintainability",
"backup_system": "master_of_muppets-backups/ with timestamped project snapshots"
},
"amplifier_board/": {
"description": "Standalone amplifier board design (Eagle import)",
"purpose": "2x gain amplification stage for 0-5V to 0-10V conversion",
"files": {
    "AmpBoard.kicad_sch": "Amplifier schematic",
    "AmpBoard.kicad_pcb": "Amplifier PCB layout",
    "AmpBoard.pretty/": "Custom footprint library"
}
},
"component_libraries": {
"ACJM_MV35_2S/": "Amphenol MV35 connector components",
"teensy.pretty-master/": "Teensy footprint library",
"teensy_library-master/": "Teensy symbol library"
}
},
"design_specifications": {
"power_supply": "Dual Â±12V with filtering",
"output_range": "0-10V CV outputs",
"dac_resolution": "12-bit precision",
"channel_count": "16 independent channels",
"amplification": "2x gain using TL074 OpAmps"
}
},
"claude_ai_system": {
"location": "claude/",
"description": "Comprehensive AI knowledge management and development tool ecosystem",
"purpose": "Enable AI-assisted development with persistent knowledge and automated workflows",
"structure": {
"contexts/": {
"description": "AI context configuration system",
"files": {
    "base.json": "Context loading configuration and auto-load rules",
    "core.json": "Core behavioral rules and mandatory policies",
    "project.json": "Project-specific information and structure",
    "data_store.json": "Knowledge file index and access patterns",
    "coding_style.json": "Code formatting and style guidelines",
    "git.json": "Git workflow and version control context"
},
"loading_model": "Auto-loading based on keywords and criticality flags"
},
"data_store/": {
"description": "Structured knowledge repository with categorized information",
"organization": {
    "knowledge/": "Structured knowledge files in JSON format",
    "pcb/": "Parsed PCB project data",
    "schematics/": "Parsed schematic project data", 
    "graphs/": "Circuit and code relationship graphs"
},
"knowledge_categories": {
    "algorithms/": "Graph theory and analysis algorithms",
    "coding/kicad/": "KiCad file format and parsing knowledge",
    "data_sheets/": "Component specifications and datasheets",
    "external_tools/": "Tool documentation and integration knowledge",
    "firmware/": "Firmware libraries and development patterns",
    "hardware/": "Hardware design knowledge and specifications"
}
},
"tools/": {
"description": "Development and analysis tools",
"tools": {
    "kicad_sch_to_json.py": "KiCad schematic to JSON converter",
    "json_to_kicad_sch.py": "JSON to KiCad schematic converter", 
    "minify_json.py": "JSON compression tool for knowledge management"
},
"policy": "All tools must have corresponding knowledge documentation"
},
"tmp/": "Temporary files and processing workspace"
},
"knowledge_management_features": {
"structured_json": "All knowledge stored in searchable JSON format",
"keyword_indexing": "Automatic keyword-based knowledge retrieval",
"cross_domain_correlation": "Hardware-firmware-algorithm relationship mapping",
"tool_integration": "Mandatory knowledge creation for all tools",
"version_tracking": "Knowledge updates synchronized with git history"
}
},
"data_sheets_structure": {
"location": "data_sheets/",
"description": "Component datasheets and technical documentation repository",
"organization": {
"pdf_files": "Original manufacturer datasheets",
"extracted_data": "AI-processed datasheet content with images and metadata",
"components": {
"ad5593r/": "Analog Devices 8-channel configurable ADC/DAC",
"mcp4728/": "Microchip 4-channel 12-bit DAC",
"tl074/": "Texas Instruments quad op-amp",
"ld1117/": "Low dropout voltage regulator",
"lt1014d/": "Linear Technology precision op-amp",
"ACJM-MV35-2S.pdf": "Amphenol connector datasheet"
}
},
"processing_methodology": "AI-assisted extraction of key specifications, pinouts, and electrical characteristics"
},
"development_methodology": {
"approach": "AI-assisted collaborative development",
"structure": "Seasonal development with episode-based documentation",
"tools": "Claude AI for development assistance and knowledge management",
"practices": {
"knowledge_first": "Comprehensive knowledge creation before implementation",
"tool_documentation": "Mandatory knowledge files for all created tools",
"version_correlation": "Git integration with knowledge versioning",
"performance_optimization": "AI-driven efficiency improvements (900x gains achieved)"
},
"seasonal_organization": {
"branch_strategy": "Git branches aligned with development seasons",
"documentation_model": "Episode-based development history",
"knowledge_evolution": "Cumulative knowledge building across seasons"
}
},
"file_organization_patterns": {
"naming_conventions": {
"projects": "snake_case for directories and files",
"kicad_files": "Project name prefix with standard KiCad extensions",
"source_code": "Muppets-themed naming (dr_teeth, electric_mayhem, muppet_clock)",
"knowledge_files": "Descriptive names with category prefixes"
},
"directory_structure": {
"depth_limit": "Maximum 3-4 levels deep for maintainability",
"separation_of_concerns": "Clear separation between hardware, firmware, tools, and knowledge",
"backup_strategy": "Automatic timestamped backups for critical design files"
},
"file_relationships": {
"cross_references": "Knowledge files reference related components and tools",
"dependency_tracking": "Clear documentation of library and tool dependencies",
"version_consistency": "Coordinated versioning across related components"
}
},
"integration_patterns": {
"workspace_integration": {
"vscode_workspace": "Multi-folder workspace for integrated development",
"folder_structure": "Root project and firmware as separate workspace folders",
"build_integration": "PlatformIO integration for embedded development"
},
"ai_integration": {
"context_loading": "Automatic knowledge loading based on development tasks",
"tool_creation": "AI-assisted tool development with mandatory documentation",
"knowledge_synthesis": "Cross-domain knowledge correlation for system understanding"
},
"version_control": {
"git_integration": "Full project versioning with selective file tracking",
"backup_exclusion": "KiCad backups excluded from version control",
"knowledge_tracking": "AI knowledge files included in version control"
}
},
"scalability_considerations": {
"modular_design": "Components designed for independent development and testing",
"template_architecture": "Generic interfaces for hardware flexibility",
"knowledge_expansion": "Extensible knowledge system for future components",
"tool_ecosystem": "Reusable tools for broader KiCad community"
},
"performance_characteristics": {
"firmware_performance": {
"latency": "2-3ms total system response time",
"update_rate": "1KHz on Windows (USB stack limited)",
"resolution": "12-bit DAC precision",
"channels": "16 independent CV outputs"
},
"tool_performance": {
"kicad_parser": "900x performance improvement over manual analysis",
"knowledge_access": "Instant keyword-based knowledge retrieval",
"build_time": "Optimized for rapid development iteration"
}
},
"future_expansion": {
"planned_features": [
"PCB layout optimization with graph-based placement",
"Automated testing framework",
"ADC input for CV-to-MIDI conversion",
"Ethernet MIDI support",
"Configuration persistence via EEPROM",
"Modular hardware assembly system"
],
"architectural_support": "Current structure designed to accommodate planned expansions",
"knowledge_evolution": "Knowledge system designed for continuous learning and improvement"
},
"community_impact": {
"open_source_contributions": [
"KiCad Hierarchical Parser - First production-ready tool for complex hierarchical designs",
"Graph-based Analysis - Novel approach to hardware/software relationship mapping", 
"AI Development Patterns - Reproducible protocols for human-AI collaboration"
],
"tool_distribution": "MIT licensed tools for broader community use",
"knowledge_sharing": "Comprehensive documentation for educational use"
},
"maintenance_guidelines": {
"knowledge_updates": "Regular synchronization of knowledge with code changes",
"tool_documentation": "Mandatory knowledge creation for any new tools",
"version_coordination": "Coordinated updates across hardware, firmware, and knowledge",
"backup_management": "Regular cleanup of KiCad backup directories",
"dependency_management": "Careful tracking of library versions and compatibility"
}
}