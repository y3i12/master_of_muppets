{
  "_metadata": {
    "version": "1.0.0",
    "created": "2025-08-15",
    "description": "Compressed session learnings and key insights",
    "format": "knowledge_cache",
    "attribution": "Framework developed with y3i12"
  },
  "sessions": {
    "2025-08-15_hardware_graph": {
      "summary": "Created comprehensive multi-layered hardware graph for PCB placement optimization",
      "duration_minutes": 25,
      "outcome": "success",
      "key_insights": [
        {
          "insight": "kicad_component_extraction",
          "description": "Always use KiCad BOM export (Tools → Generate BOM → TSV) instead of parsing individual schematics",
          "reason": "Hierarchical sheets with multiple instances only show up in complete BOM, not individual files",
          "taught_by": "y3i12",
          "impact": "Critical for getting complete component count (163 vs 54 components)"
        },
        {
          "insight": "graph_based_hardware_representation",
          "description": "Multi-layered graph structure more powerful than linear placement rules",
          "components": ["node_registry", "connectivity_networks", "proximity_clusters", "functional_zones", "optimization_rules"],
          "benefits": ["captures_complex_relationships", "enables_algorithmic_optimization", "reusable_knowledge_cache"]
        },
        {
          "insight": "token_efficient_metadata_encoding",
          "description": "Use compact keys (pxf, ncp, sgw) with lookup dictionary to maximize information density",
          "result": "Rich metadata without verbose descriptions"
        },
        {
          "insight": "hierarchical_json_structure",
          "description": "Break complex data into multiple JSON files to respect token limits",
          "pattern": ["node_registry.json", "networks.json", "placement_optimization.json", "README.md"]
        }
      ],
      "technical_discoveries": {
        "kicad_hierarchical_sheets": {
          "problem": "Component count mismatch (54 found vs 163 actual)",
          "root_cause": "Parsing individual .kicad_sch files misses hierarchical instances",
          "solution": "Use KiCad BOM export to get flattened component list",
          "pattern": "OpAmp1A-E, OpAmp2A-E, OpAmp3A-E, OpAmp4A-E from 4 hierarchical amp modules"
        },
        "pcb_placement_optimization": {
          "approach": "Force-directed placement with multi-constraint optimization",
          "critical_factors": ["proximity_requirements", "signal_integrity", "thermal_management", "zone_constraints"],
          "success_metrics": ["decoupling_within_3mm", "i2c_under_50mm", "feedback_under_10mm"]
        }
      },
      "framework_principles": {
        "knowledge_caching": "Create persistent local cache of project relationships and metadata",
        "multi_layer_networks": "Same nodes, different edge rules for different analysis perspectives",
        "optimization_ready": "Structure data for algorithmic processing, not just human reading",
        "token_efficiency": "Maximize information density while maintaining readability"
      },
      "reusable_patterns": {
        "component_metadata_encoding": {
          "proximity_factor": "0-1 scale, higher needs closer placement",
          "criticality_priority": "0-10 scale for noise sensitivity",
          "functional_grouping": "String IDs for logical organization",
          "edge_weights": "Multi-dimensional optimization parameters"
        },
        "network_types": [
          "primary_connectivity (actual electrical)",
          "proximity_network (physical clustering)",
          "power_distribution (supply hierarchy)",
          "functional_hierarchy (logical zones)",
          "signal_flow (critical paths)",
          "thermal_network (heat management)"
        ]
      },
      "files_created": [
        "claude/hardware_graph/complete_node_registry.json",
        "claude/hardware_graph/complete_networks.json", 
        "claude/hardware_graph/placement_optimization.json",
        "claude/hardware_graph/README.md"
      ],
      "future_applications": {
        "immediate": "Use for Master of Muppets PCB placement",
        "general": "Framework applicable to any complex technical project with relationships",
        "sharing": "Propose pattern to other users working on systematic project representation"
      }
    }
  },
  "cumulative_knowledge": {
    "master_of_muppets_project": {
      "architecture": "16-channel MIDI-to-CV converter using Teensy 4.1, 2×AD5593R DACs, 4×TL074 groups",
      "component_count": 163,
      "critical_relationships": ["i2c_bus_topology", "opamp_feedback_loops", "power_distribution"],
      "hardware_graph_complete": true
    },
    "general_techniques": {
      "cad_data_extraction": "Always use CAD tool's export functions rather than parsing raw files",
      "hierarchical_design_analysis": "Flatten hierarchy before analysis to get complete picture",
      "optimization_data_structures": "Multi-layered graphs with weighted edges for complex constraints"
    }
  },
  "next_session_priorities": [
    "Use hardware graph for actual PCB placement",
    "Test optimization algorithms against real constraints",
    "Extend framework for other project types if requested"
  ],
  "cache_usage_notes": {
    "how_to_read": "Load JSON files from claude/hardware_graph/ directory",
    "key_files": "complete_node_registry.json (components), complete_networks.json (relationships)",
    "update_trigger": "When schematic changes, re-export BOM and update graph",
    "extensibility": "Add new network layers for additional analysis perspectives"
  }
}