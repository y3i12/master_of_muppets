{
  "description": "Context for accessing and managing JSON knowledge files in claude/data_store",
  "purpose": "Provides keywords and instructions for loading condensed knowledge about components, circuits, and project data",
  "auto_update_instructions": {
    "when_to_update": [
      "New JSON files added to data_store",
      "Existing files restructured",
      "New categories or types of knowledge created",
      "Keywords become outdated or insufficient"
    ],
    "how_to_update": [
      "Add new file paths to knowledge_files section",
      "Update keywords arrays with relevant search terms",
      "Add new categories to file_categories",
      "Update access_patterns for new data structures"
    ]
  },
  "file_categories": {
    "data_sheets": {
      "location": "claude/data_store/knowledge/data_sheets/",
      "description": "Component datasheets in structured JSON format",
      "keywords": ["datasheet", "component", "specs", "electrical", "pinout", "pin", "register", "voltage", "current", "power", "timing", "i2c", "spi", "interface", "reference", "resolution", "adc", "dac", "temperature"]
    },
    "kicad_knowledge": {
      "location": "claude/data_store/knowledge/coding/kicad/",
      "description": "KiCad file structure and parsing knowledge",
      "keywords": ["kicad", "pcb", "schematic", "footprint", "symbol", "layer", "net", "track", "via", "component", "routing", "kiutils", "parser", "board", "circuit"]
    },
    "pcb_data": {
      "location": "claude/data_store/pcb/",
      "description": "Parsed PCB project data with component placement and routing",
      "keywords": ["pcb", "placement", "routing", "footprint", "coordinate", "position", "layer", "track", "via", "drill", "board", "outline", "manufacturing"]
    },
    "schematic_data": {
      "location": "claude/data_store/schematics/",
      "description": "Parsed schematic project data with connectivity and components",
      "keywords": ["schematic", "connectivity", "net", "wire", "junction", "component", "symbol", "reference", "value", "electrical", "connection", "hierarchy", "sheet"]
    },
    "external_tools": {
      "location": "claude/data_store/knowledge/external_tools/",
      "description": "Knowledge about external tools and integrations",
      "keywords": ["tool", "integration", "external", "api", "interface", "workflow", "automation"]
    },
    "firmware": {
      "location": "claude/data_store/knowledge/firmware/",
      "description": "Firmware-related knowledge and patterns",
      "keywords": ["firmware", "embedded", "teensy", "microcontroller", "code", "programming", "platform", "midi", "cv", "dac", "threading", "real-time"]
    },
    "hardware": {
      "location": "claude/data_store/knowledge/hardware/",
      "description": "Hardware design knowledge and patterns",
      "keywords": ["hardware", "design", "circuit", "analog", "digital", "power", "signal"]
    },
    "algorithms": {
      "location": "claude/data_store/knowledge/algorithms/",
      "description": "Computer science algorithms and mathematical concepts",
      "keywords": ["algorithm", "data structure", "complexity", "optimization", "graph", "tree", "sorting", "searching"]
    }
  },
  "knowledge_files": {
    "ad5593r": {
      "path": "claude/data_store/knowledge/data_sheets/ad5593r.json",
      "keywords": ["ad5593r", "analog devices", "adc", "dac", "12-bit", "i2c", "configurable", "gpio", "reference", "temperature sensor", "mixed signal"],
      "description": "8-Channel, 12-Bit, Configurable ADC/DAC with On-Chip Reference, I2C Interface"
    },
    "ld1117": {
      "path": "claude/data_store/knowledge/data_sheets/ld1117.json",
      "keywords": ["ld1117", "voltage regulator", "linear", "ldo", "power supply", "3.3v", "adjustable", "current limit"],
      "description": "Low dropout voltage regulator datasheet"
    },
    "lt1014d": {
      "path": "claude/data_store/knowledge/data_sheets/lt1014d.json",
      "keywords": ["lt1014d", "operational amplifier", "opamp", "quad", "precision", "low noise", "audio", "analog"],
      "description": "Quad precision operational amplifier datasheet"
    },
    "mcp4728": {
      "path": "claude/data_store/knowledge/data_sheets/mcp4728.json",
      "keywords": ["mcp4728", "dac", "12-bit", "quad", "i2c", "microchip", "voltage output", "eeprom", "non-volatile"],
      "description": "Quad 12-bit DAC with I2C interface and EEPROM"
    },
    "tl074": {
      "path": "claude/data_store/knowledge/data_sheets/tl074.json",
      "keywords": ["tl074", "operational amplifier", "opamp", "quad", "jfet", "low noise", "audio", "general purpose"],
      "description": "Quad JFET-input operational amplifier datasheet"
    },
    "pcb_structure": {
      "path": "claude/data_store/knowledge/coding/kicad/pcb.json",
      "keywords": ["pcb", "kicad", "board", "footprint", "track", "via", "layer", "net", "routing", "kiutils", "parser", "coordinate", "position"],
      "description": "KiCad PCB file structure and parsing reference"
    },
    "schematic_structure": {
      "path": "claude/data_store/knowledge/coding/kicad/schematic.json",
      "keywords": ["schematic", "kicad", "symbol", "component", "wire", "junction", "net", "connectivity", "kiutils", "parser", "hierarchy"],
      "description": "KiCad schematic file structure and parsing reference"
    },
    "datalab_to_marker": {
      "path": "claude/data_store/knowledge/external_tools/datalab-to.marker.json",
      "keywords": ["datalab", "marker", "external tool", "integration", "api", "workflow"],
      "description": "External tool integration knowledge"
    },
    "minify_json_tool": {
      "path": "claude/data_store/knowledge/external_tools/minify_json.json",
      "keywords": ["minify", "json", "batch", "processing", "knowledge", "compression", "storage", "python", "script", "automation", "file processing", "claude tools"],
      "description": "Python script for batch minification of JSON files in the knowledge base"
    },
    "knowledge_management": {
      "path": "claude/data_store/knowledge/managing.json",
      "keywords": ["knowledge", "managing", "create knowledge", "update knowledge", "knowledge file", "bootstrap", "instructions", "data_store", "categorization", "research", "documentation"],
      "description": "CRITICAL: Bootstrap instructions for creating and managing knowledge files"
    },
    "correlation_knowledge_creation": {
      "path": "claude/data_store/knowledge/correlation_knowledge_creation.json",
      "keywords": ["correlation", "cross-domain", "multi-domain", "integration", "combination", "co-design", "unified", "hardware software", "circuit code", "pcb firmware", "system-level", "bootstrap", "synthesis", "embedded system", "real-time", "fault analysis", "optimization", "verification"],
      "description": "CRITICAL: Bootstrap instructions for creating cross-domain correlation knowledge files that combine multiple knowledge domains"
    },
    "s_expressions": {
      "path": "claude/data_store/knowledge/coding/kicad/s_expressions.json",
      "keywords": ["s-expression", "sexpr", "kicad", "parsing", "lisp", "syntax", "grammar", "kicad_sch", "kicad_pcb", "kicad_mod", "kicad_sym", "file format", "tokenizer", "lexer", "parser", "atom", "list", "parenthesis"],
      "description": "KiCad S-expressions format reference for parsing and generating KiCad files"
    },
    "kiutils": {
      "path": "claude/data_store/knowledge/coding/kicad/kiutils.json",
      "keywords": ["kiutils", "kicad", "parser", "python", "board", "schematic", "footprint", "symbol", "pcb", "sexpr", "s-expression", "api", "library", "from_file", "to_file", "create_new", "dataclass", "kicad_pcb", "kicad_sch", "kicad_mod", "kicad_sym"],
      "description": "Python library for parsing and manipulating KiCad files (boards, schematics, symbols, footprints)"
    },
    "master_of_muppets_firmware": {
      "path": "claude/data_store/knowledge/firmware/master_of_muppets_firmware.json",
      "keywords": ["master of muppets", "firmware", "teensy", "teensy 4.1", "midi", "cv", "converter", "dac", "ad5593r", "mcp4728", "usb midi", "threading", "teensythreads", "real-time", "dr_teeth", "electric_mayhem", "muppet", "platformio", "arduino", "embedded", "multi-threaded", "i2c", "pitch bend", "16 channel", "0-10v"],
      "description": "Complete firmware architecture and implementation details for Master of Muppets USB MIDI to CV converter"
    },
    "embedded_realtime_best_practices": {
      "path": "claude/data_store/knowledge/firmware/embedded_realtime_best_practices.json",
      "keywords": ["embedded", "real-time", "realtime", "best practices", "optimization", "threading", "mutex", "atomic", "memory management", "static allocation", "determinism", "watchdog", "error handling", "teensy", "arduino", "microcontroller", "interrupt", "dma", "i2c", "timing", "scheduling", "cooperative", "multitasking", "thread safety", "critical section", "stack", "heap", "volatile", "inline", "template"],
      "description": "Comprehensive guide for embedded real-time programming with specific improvements for the firmware"
    },
    "teensy_4_1": {
      "path": "claude/data_store/knowledge/hardware/teensy_4_1.json",
      "keywords": ["teensy", "teensy 4.1", "arm", "cortex-m7", "imxrt1062", "600mhz", "microcontroller", "development board", "usb", "ethernet", "i2c", "spi", "uart", "adc", "dac", "pwm", "gpio", "floating point", "fpu", "tightly coupled memory", "branch prediction", "pjrc"],
      "description": "Complete specifications and features of Teensy 4.1 development board"
    },
    "arduino_framework": {
      "path": "claude/data_store/knowledge/firmware/arduino_framework.json",
      "keywords": ["arduino", "framework", "embedded", "c++", "digitalWrite", "analogRead", "serial", "wire", "i2c", "spi", "setup", "loop", "interrupts", "pwm", "timing", "delay", "millis", "micros", "pinMode"],
      "description": "Arduino C++ framework for embedded microcontroller development"
    },
    "adafruit_busio": {
      "path": "claude/data_store/knowledge/firmware/adafruit_busio.json",
      "keywords": ["adafruit", "busio", "i2c", "spi", "uart", "abstraction", "transport", "register", "device", "communication", "protocol", "bus", "sensor", "library"],
      "description": "Adafruit BusIO library for I2C/SPI/UART abstraction and register management"
    },
    "adafruit_mcp4728": {
      "path": "claude/data_store/knowledge/firmware/adafruit_mcp4728.json",
      "keywords": ["adafruit", "mcp4728", "dac", "4-channel", "12-bit", "i2c", "microchip", "analog", "voltage", "output", "eeprom", "reference", "gain", "power down"],
      "description": "Arduino library for MCP4728 4-channel 12-bit I2C DAC"
    },
    "ad5593r": {
      "path": "claude/data_store/knowledge/firmware/ad5593r.json",
      "keywords": ["ad5593r", "analog devices", "adc", "dac", "gpio", "i2c", "8-channel", "12-bit", "configurable", "mixed signal", "rob tillaart", "temperature sensor", "voltage reference"],
      "description": "Arduino library for AD5593R 8-channel configurable ADC/DAC/GPIO device"
    },
    "teensy_threads": {
      "path": "claude/data_store/knowledge/firmware/teensy_threads.json",
      "keywords": ["teensy", "threads", "multithreading", "cooperative", "mutex", "synchronization", "threading", "parallel", "concurrent", "yield", "context switch", "fernando trias", "c++11"],
      "description": "TeensyThreads library for cooperative multithreading on Teensy microcontrollers"
    },
    "function_generator": {
      "path": "claude/data_store/knowledge/firmware/function_generator.json",
      "keywords": ["function generator", "waveform", "sine", "triangle", "square", "sawtooth", "lfo", "signal generation", "rob tillaart", "oscillator", "frequency", "amplitude", "phase", "test signal"],
      "description": "Library for generating various waveforms and mathematical functions for signal processing"
    },
    "graph_theory": {
      "path": "claude/data_store/knowledge/algorithms/graph_theory.json",
      "keywords": ["graph", "theory", "vertex", "edge", "algorithm", "traversal", "shortest path", "spanning tree", "network", "topology", "dijkstra", "bfs", "dfs", "connectivity", "cycle", "tree", "dag", "complexity", "data structure"],
      "description": "Comprehensive guide to graph theory concepts, algorithms, and applications in computer science"
    },
    "circuit_analysis_graphs": {
      "path": "claude/data_store/knowledge/algorithms/circuit_analysis_graphs.json",
      "keywords": ["circuit", "analysis", "electrical", "graph", "network", "node", "branch", "kcl", "kvl", "nodal", "mesh", "spice", "topology", "tree", "cotree", "impedance", "admittance", "pcb", "simulation"],
      "description": "Application of graph theory to electrical circuit analysis, modeling, and design"
    },
    "code_analysis_graphs": {
      "path": "claude/data_store/knowledge/algorithms/code_analysis_graphs.json", 
      "keywords": ["code", "analysis", "program", "software", "control flow", "data flow", "call graph", "dependency", "static analysis", "dynamic analysis", "compiler", "optimization", "cfg", "ast", "refactoring", "testing"],
      "description": "Application of graph theory to software analysis, optimization, and understanding"
    },
    "master_of_muppets_complete_correlation": {
      "path": "claude/data_store/knowledge/master_of_muppets_complete_correlation.json",
      "keywords": ["master of muppets", "correlation", "cross-domain", "multi-domain", "integration", "hardware software", "circuit firmware", "pcb code", "system-level", "co-design", "embedded system", "real-time", "teensy", "midi", "cv", "dac", "ad5593r", "mcp4728", "threading", "teensythreads", "graph theory", "circuit analysis", "code analysis", "kicad", "performance", "optimization", "fault tolerance", "reliability", "timing analysis"],
      "description": "CRITICAL: Comprehensive cross-domain correlation of all Master of Muppets knowledge domains including hardware, firmware, algorithms, and design methodologies"
    }
  },
  "access_patterns": {
    "component_lookup": {
      "trigger_keywords": ["component", "datasheet", "spec", "pin", "electrical", "voltage", "current"],
      "action": "Search knowledge_files for component name or part number, load corresponding datasheet JSON",
      "example": "For AD5593R questions, load claude/data_store/knowledge/data_sheets/ad5593r.json"
    },
    "kicad_parsing": {
      "trigger_keywords": ["kicad", "parse", "pcb", "schematic", "symbol", "footprint", "net", "connectivity"],
      "action": "Load appropriate KiCad structure reference from claude/data_store/knowledge/coding/kicad/",
      "example": "For PCB analysis, load claude/data_store/knowledge/coding/kicad/pcb.json"
    },
    "project_data": {
      "trigger_keywords": ["project", "master of muppets", "amplifier board", "placement", "routing", "component list"],
      "action": "Load project-specific data from claude/data_store/pcb/ or claude/data_store/schematics/",
      "example": "For Master of Muppets PCB data, load claude/data_store/pcb/master_of_muppets/complete_project/MasterOfMuppets.json"
    }
  },
  "usage_instructions": {
    "file_loading": {
      "method": "Use Read tool with absolute path",
      "encoding": "UTF-8",
      "error_handling": "Check file existence before loading"
    },
    "keyword_matching": {
      "method": "Case-insensitive substring matching",
      "priority": "Exact matches first, then partial matches",
      "fallback": "Search multiple categories if initial match fails"
    },
    "data_extraction": {
      "method": "Parse JSON structure according to document type",
      "validation": "Verify expected structure exists before accessing",
      "safe_access": "Use get() methods for optional fields"
    }
  },
  "common_queries": {
    "component_specs": {
      "pattern": "What are the specifications of [component]?",
      "action": "Load component datasheet JSON and extract electrical_specifications section"
    },
    "pin_configuration": {
      "pattern": "What is the pinout of [component]?",
      "action": "Load component datasheet JSON and extract pin_configuration section"
    },
    "circuit_analysis": {
      "pattern": "Analyze the [project] circuit",
      "action": "Load project schematic and PCB data, cross-reference with component datasheets"
    },
    "kicad_structure": {
      "pattern": "How to parse KiCad [file_type]?",
      "action": "Load appropriate KiCad structure reference (pcb.json or schematic.json)"
    }
  },
  "update_triggers": [
    "new component added to project",
    "new datasheet processed",
    "new KiCad version support",
    "new project analysis created",
    "new external tool integration",
    "keywords become insufficient for matching"
  ]
}